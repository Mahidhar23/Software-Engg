# -*- coding: utf-8 -*-
"""1643 Software Engineering TASK-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZLQlvZaBCCVexp3USU3X1n_bZyFqZku2
"""

import matplotlib.pyplot as plt
import numpy as np
print("P.Pranav BU22CSEN0101643")

# Stage 1: Hard-coded variables with graph output
def weather_model_hardcoded():
    a = 15
    b = 8
    c = 6

    x = np.linspace(-10, 10, 100)
    y = a * (x ** 2) + b * x + c

    plt.figure(figsize=(8, 6))
    plt.plot(x, y, label=f"y = {a}x² + {b}x + {c}", color='blue')
    plt.title("Weather Modeling - Quadratic Equation")
    plt.xlabel("x (Input Parameter)")
    plt.ylabel("y (Weather Parameter)")
    plt.axhline(0, color='black', linewidth=0.5)
    plt.axvline(0, color='black', linewidth=0.5)
    plt.grid(color='gray', linestyle='--', linewidth=0.5)
    plt.legend()
    plt.show()

weather_model_hardcoded()

# Stage 2: Keyboard input with graph output
print("P.Pranav BU22CSEN0101643")
def weather_model_keyboard():
    try:
        a = float(input("Enter coefficient a: "))
        b = float(input("Enter coefficient b: "))
        c = float(input("Enter coefficient c: "))

        x = np.linspace(-10, 10, 100)
        y = a * (x ** 2) + b * x + c

        plt.figure(figsize=(8, 6))
        plt.plot(x, y, label=f"y = {a}x² + {b}x + {c}", color='green')
        plt.title("Weather Modeling - Quadratic Equation")
        plt.xlabel("x (Input Parameter)")
        plt.ylabel("y (Weather Parameter)")
        plt.axhline(0, color='black', linewidth=0.5)
        plt.axvline(0, color='black', linewidth=0.5)
        plt.grid(color='gray', linestyle='--', linewidth=0.5)
        plt.legend()
        plt.show()
    except ValueError:
        print("Invalid input. Please enter numeric values.")

weather_model_keyboard()

import matplotlib.pyplot as plt
import numpy as np
print("P.Pranav BU22CSEN0101643")
# Stage 3: Read from a file and plot a single quadratic equation
def weather_model_file_single(filename):
    try:
        with open(filename, 'r') as file:
            line = file.readline().strip()
            try:
                a, b, c = map(float, line.split(','))
                x = np.linspace(-10, 10, 100)
                y = a * (x ** 2) + b * x + c

                # Plot the graph
                plt.figure(figsize=(8, 6))
                plt.plot(x, y, label=f"y = {a}x² + {b}x + {c}", color='blue')
                plt.title("Weather Modeling - Single Quadratic Equation")
                plt.xlabel("x (Input Parameter)")
                plt.ylabel("y (Weather Parameter)")
                plt.axhline(0, color='black', linewidth=0.5)
                plt.axvline(0, color='black', linewidth=0.5)
                plt.grid(color='gray', linestyle='--', linewidth=0.5)
                plt.legend()
                plt.show()
            except ValueError:
                print(f"Invalid line format in file: {line}")
    except FileNotFoundError:
        print(f"File {filename} not found.")

weather_model_file_single('single_input.txt')

# Stage 4: Read from a file and plot multiple quadratic equations
print("P.Pranav BU22CSEN0101643")
def weather_model_file_multiple(filename):
    try:
        with open(filename, 'r') as file:
            plt.figure(figsize=(10, 7))
            for line in file:
                try:
                    a, b, c = map(float, line.strip().split(','))
                    x = np.linspace(-10, 10, 100)
                    y = a * (x ** 2) + b * x + c
                    plt.plot(x, y, label=f"y = {a}x² + {b}x + {c}")
                except ValueError:
                    print(f"Invalid line format: {line.strip()}")

            plt.title("Weather Modeling - Multiple Quadratic Equations")
            plt.xlabel("x (Input Parameter)")
            plt.ylabel("y (Weather Parameter)")
            plt.axhline(0, color='black', linewidth=0.5)
            plt.axvline(0, color='black', linewidth=0.5)
            plt.grid(color='gray', linestyle='--', linewidth=0.5)
            plt.legend()
            plt.show()
    except FileNotFoundError:
        print(f"File {filename} not found.")

weather_model_file_multiple('multi_input.txt')